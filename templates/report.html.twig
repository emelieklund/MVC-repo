{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report page</h1>

    <section>
    <a id="kmom01"><h2>Kmom01</h2></a>
        <p>Jag är bekant med objektorientering från ooPython-kursen då jag läste det kurspaketet förra året, men det är ju ett tag sedan nu. Mycket känner jag igen men vissa saker behöver jag nog repetera. Och sen är det ju ett annat språk nu också så det skiljer sig ju lite på så vis.</p>
        <p>I en PHP-klass kan man använda en konstruktor för att instansiera/sätta upp klassen, men det är inget krav då det också går att göra i efterhand. Variabler inom en klass benämns som medlemsvariabler eller properties. Dessa går att ha som public och nås då även utifrån klassen, men det är att föredra att ha dem som private, då man oftast inte vill att de ska gå att ändra på utifrån. Anger man en property som protected kan man nå den ifrån en klass som ärver från originalklassen. När man refererar till en property inom en klass, så används $this–>variable. Funktioner i klasser kallas metoder. För att skapa ett objekt av klassen skriver man $object = new Class();</p>
        <p>Det är många olika delar av kodbasen vi använder nu, med controllers och templates osv, så det är en del att hålla ordning på men det går nog fort att lära sig att hantera det. Jag tror att när man väl kommer in i det så kommer det att kännas väldigt strukturerat och trevligt.</p>
        <p>I ”PHP The Right Way” valde jag att fokusera lite extra på länken om Symfony Coding Standards (https://symfony.com/doc/current/contributing/code/standards.html) då det kändes relevant just nu. Mycket av det som stod där känns ganska universalt för de programmeringsspråk jag hittills har bekantat mig med, men en sak som kändes annorlunda med Symfony är följande punkt:</p>
        <li>Add a comma after each array item in a multi-line array, even after the last one;</li>
        <p>Det känns som att man oftast hoppar över kommatecknet efter sista. En annan punkt handlade om att man ska definiera en klass per fil, med undantaget private helper classes som inte ska användas utifrån. I artikeln skummade jag även igenom stycken som handlade om databaser. Det såg lite annorlunda ut från det vi har gjort tidigare så det ser jag fram emot att lära mig mer om.</p>
        <p>Min TIL för kmom01 är hur man definierar klasser i PHP.</p>
    </section>

    <section>
    <a id="kmom02"><h2>Kmom02</h2></a>
        <p>Kmom02 är äntligen klart och det har handlat om arv och komposition av klasser, samt lite om trait och interface. Arv innebär att en klass ärver alla egenskaper från en annan klass, men som också har en eller flera egna medlemsvariabler/konstanter/metoder utöver det. Komposition betyder att en klass består av en annan klass. En variation av komposition är aggregation, där kopplingen mellan klasserna är svagare. I det fallet så kan den ena klassen överleva om den andra förstörs, vilket inte är möjligt i vanlig komposition.</p>
        <p>Trait är en funktion som liknar arv, men är konstruerad på ett annat sätt. Traits kan användas av en klass för att utöka funktionaliteten. De är uppbyggda ungefär som klasser, och när de används av en klass så skriver man ”use <traitName>;”
            Interface är ett slags kontrakt. Det kan implementeras av en klass, och då lovar klassen att den ska erbjuda vissa metoder. Interface innehåller ingen kod i sig, utan visar bara vad en klass kan användas till.</p>
        <p>Uppgiften tycker jag har varit ganska utmanande och tidskrävande. Klasserna tyckte jag gick bra att implementera, dock hade jag lite problem med sessionerna samt JSON API:erna och där framför allt krav 5 var lite extra jobbigt. Sessionerna i sig var inte så svåra att få till, problemet var hur jag skulle visa upp dem i session-templaten. Eftersom jag sparar ”deck_session” som ett objekt (DeckOfCards), så kunde jag inte skriva ut det i templaten utan att göra om det till en array, så det fick jag göra först genom att använda getDeckSorted(). Därför är ”deck_session” hårdkodad i session-templaten, vilket jag inte är jättenöjd med. Key-värdena i sessionen (som just nu bara är ett), får jag fram genom en for-loop av array_keys($session->all()).</p>
        <p>Krav 5 i JSON API-delen löste jag med hjälp av formulär och en mellan-route ”get_nr”, som tar det angivna värdet från formuläret och sedan kör redirect till api/deck/draw/:number. Parametern ”number” skickar jag med som [’number’ => $num] och sedan skickas även talet 307 med som en tredje parameter, en lösning jag hittade på stackoverflow och som tydligen bevarar request-metoden då man annars bara kan köra redirect till en GET-route om jag har förstått saken rätt. Detta får faktiskt bli min TIL för kmom02. Spännande.</p>
        <p>Än så länge så tycker jag att vissa delar med Symfony och MVC-metoden har varit enkla att förstå, medan andra delar har varit väldigt utmanande. Det har krävts många googlingar och testningar. Nu känner jag dock att vissa saker börjar släppa lite. Jag hoppas att det fortsätter att vara en bra balans mellan utmaningar och uppenbarelser.</p>
    </section>

    <section>
    <a id="kmom03"><h2>Kmom03</h2></a>
        <p>Kmom03 avklarat. Att börja kursmomentet med att skapa ett flödesdiagram och skriva pseudokod tror jag absolut hjälpte mig att komma igång lite. Det gjorde att jag fick en ganska tydlig bild över helheten, även om jag inte fick med så mycket detaljer.</p>
        <p>Att implementera spelet tyckte jag gick bra. Det finns ju många scenarion i spelet som man behöver tänka på, men jag är nöjd med hur jag lyckades lösa det. På spelplanen visas första kortet från början, och sedan väljer man om man vill ta ett till kort eller stanna. Summan av korthanden visas. Om man har ett ess på handen så kommer två poäng-summor att visas, en där esset är värt 1 och en där esset är värt 14. Får man flera ess så kommer bara det ena att räknas som 14 i den alternativa summan, eftersom två ess är värda 28. Om en av poäng-summorna blir 21, så vinner man. Om man stannar och båda poängen är under 21, så kommer den högsta automatiskt att väljas.</p>
        <p>När det är bankens tur så sköts dragningarna av kort automatiskt med hjälp av JavaScripts setTimeout-funktion och window.location.href. Banken fortsätter att dra kort så länge summan är under 17.</p>
        <p>Jag är överlag nöjd med mina klasser och controller, men bland annat play-routen i GameController är lite stor och jag hade helst velat lägga en del kod i separata klasser, men jag testade mig fram och kom inte på något sätt att göra det på som inte gjorde att det blev ännu krångligare.</p>
        <p>Efter tre kursmoment med Symfony så känner jag att jag börjar få lite koll på det. Det känns för det mesta smidigt att använda. Jag tycker dock ibland att det är svårt att hitta information i dokumentationen. Ibland hittar man bättre tips på olika forum, och det känns ju lite skevt. Men jag antar att man får öva på att söka information också.</p>
        <p>Min TIL för kmom03 var hur man fick till en timeout-funktion i Twig med hjälp av JavaScript.</p>
    </section>

    <section>
    <a id="kmom04"><h2>Kmom04</h2></a>
        <p>Redovisningstext</p>
    </section>

    <section>
    <a id="kmom05"><h2>Kmom05</h2></a>
        <p>Redovisningstext</p>
    </section>

    <section>
    <a id="kmom06"><h2>Kmom06</h2></a>
        <p>Redovisningstext</p>
    </section>

    <section>
    <a id="kmom07-10"><h2>Kmom07-10</h2></a>
        <p>Redovisningstext</p>
    </section>
{% endblock %}
